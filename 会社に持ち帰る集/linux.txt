カーネル　ユーザーと対話する能力は持っていない。
シェル　シェルと呼ばれるプログラムが仲介して画面に入力されたコマンドを解釈して処理を依頼する
結果を画面に出力する。　シェルが仲介役になる。シェル経由でコマンドをカーネルに伝えている。　ログインすると自動でシェルが起動して入力待ちになる

bashが標準のシェルが多い。　bash以外にもシェルがあるんだな。　
シェルスクリプト　カーネルを覆う殻
シェルスクリプト　一連の処理を実現するプログラム　シェルによって解釈実行されるScript　なのでしぇるすくりぷと

シェルによって解釈実行されるScript
bashのシェルスクリプト
シェル変数：シェルの中で使う変数 set export var = 0

環境変数：　linux 変数 printenv varを入れる
シェル変数はローカル変数
環境変数はグローバル変数
exerciseで変数の話を行うべし　
exprコマンドを使用して使う　

if[条件式];then
条件式を満たす場合の処理
fi

[]を使用する場合はスペースに注意
数値を比較する場合は独特の書き方が存在。
 -dパスなど。
 -a
case文
* でふぉるどなんでもいいよ
?　一文字
文字列を囲む際にはダブル句オート右辺と左辺がなくなる。　

引数の個数
$n
引数の中身を取ることができる。
戻り値はexitコマンドを用いる。



コマンドの実態はディスク上の保存ファイル
シェルからコマンドを実行するとカーネルはディスクから実行ファイルを読み込んでメモリに格納してメモリ内容に従ってCPUがプログラムを実行する。
コンピュータそのものはそのまま実行するわけではない。
メモリ上の凝りっぱなしではなくメモリに展開される。メモリの容量は有限なので実行プロセスは
メモリ上の実行状態にあるプログラムのことをプロセスと呼ぶ。
ある古マンdおを複数実行するとプロセスは別のメモリ領域が割り当てられ宇
プロセスには実行ユーザが設定されている。他人のプロセスを勝手に操作することができない。　他人のプロセスを勝手に操作することはできない。
カーネル　ＯＳの本体プロセス管理メモリ管理　プロセスＩＤを割り当てている。第三者が落とせないように管理している。セキュリティホールになってしまうので。プロセス管理はかー寝るの重要機能。

ジョブ
プロセスはカーネルから見た処理の単位。シェルから見た処理の単位をジョブという。
シェルからみるとプロセスは全て一個。カーネルから見ると3つ。プロセスＩＤはシステム全体で一意。ジョブはシェル事にジョブ番号を持つ。　ジョブはシェル事にジョブ番号を持つ。

ジョブを終了させることがある。プログラムの不具合などでコマンドが操作を受け付けなくなった場合にはプログラムの終了を行う。
フォアグラウンドバックグラウンド　スリープ1 一秒待つ。
& バックグラウンドで実行する　ジョブ番号を振られる。
ジョブコマンド　
バックグラウンドで動かしているのは終わるまで処理を受け付けない。　
実行ユーザーやスーパーユーザーのみ実行できる。killコマンドで実行プロセスを終了できる。
使える資源をリソース　ＰＣだとコンピュータの構成要素と能力　ＣＰＵ　メモリ　ストレージ　ネットワーク
空きがなくなると処理性能がとたんにがた落ち数r。　
リソース監視　Linuxは何かしらの異常が進行していても一見分からない。　問題なしと思っているとシステム障害に繋がる。
リソースの状態をチェックするためにチェックする。
いくつかのコマンドを使って稼働状況が良好であることを確認する。
vmstat memory cpu procsなどでメモリの状況を把握する
その他の知識
環境変数はログアウトすると無効になる。

毎回ログインして環境を定義するのは不便なので初期化ファイルを読み込ませる。.bash
.で始まるファイルはどっとファイルと呼ばれる。 ./ ../
隠しファイルとして扱われ、普段は見えない。

エイリアス　別名を意味する。長いコマンド名を短いコマンドに返る。
rm rm -iに変えることで確認コマンドを入れることができる。

システムログファイルは都度ログが出力され続ける。　そのままでは再現なくファイルサイズが増大するため定期的にファイルをリネームしてからのファイルを元の名前で作成する。
ファイルのろてーとを行う。
増えすぎないように。いつかディスクを圧迫しないように。
パッケージのインストール
パッケージとはlinuxのアプリケーションの配布携帯　ディストリビューションやバージョンで異なる。 apacheやlinuxでＤＢを構築したいのでpostgresでパッケージを指定してインストールすることができる。

どこから設定するのか？といったことを展開していくパターン。
自分で構築した際に出会うのでその時に作る。
systemctlコマンド　サービスの起動や停止起動設定の変更や状態確認
難しい

アプリケーションはただそれだけだと動かない。重さもなければ形もない。それだけでは動かない。ハードウェアやネットワークに接続できるだけの環境が必要。
アプリを動かすシステム構成要素をインフラという。

生活産業の基盤となる設備や施設。存在するだけでは意味がない。使ってもらわないと意味がない。物があればそれでいいというわけではない。
ITインフラ
ストレージ：すごいHDD　耐障害化が施された機器　一式で数億円する。
ネットワーク機器　ルータのほかにスイッチやファイアウォール
ソフトウェアとしてのファイアウォールとハードウェアというファイアウォール。
ストレージ　ネットワーク相互を繋ぐネットワーク機器　有線のものも多い。お互いLANケーブル　これでネットワークを繋ぐ。

ソフトウェアの話。
OS
OSをインストールする。設定はアカウントネットワークセキュリティサービスの設定。　ミドルウェア　ＯＳとアプリの間に存在してアプリが共通して利用する機能を提供する。
ＤＢＭＳといったものでミドルウェアを導入する。その機能を開発する必要がなくなる。
ミドルエウェアごとに固有の設定を行う。
インフラエンジニアはアプリケーション以外の要素全てを担当する。
インフラは
OＳ一つとっても色々設定方法が変わる。インフラも

ハードやソフトはなじみがない。
技術更新
IＰａドレスの設定　ネットワークが全て分からないということはない。
鉄でできたケースがあって、それぞれがサーバとして動いている。
インフラ設計
インフラ構築
インフラ運用

インフラ設計ではシステムやサービスが適切に動作するように必要となるコンピュータ構成ネットワーク構成を導き出す。

システムやサービスの利用者が求める室速さボリュームなどを満たすための性能などを要件としてまとめる。

サーバ
DＢサーバ
ＤＮＳサーバ
www.nic.ad.jp
日本のＩＰアドレスを管理する団体。
コンピュータは数字さえわかれば通信できる。人間が認識しやすい名前で識別。

www：コンピュータ名

DNSサーバ
ルーターがその役割をしている。ドメイン名を入れるとアドレスをDＮＳサーバに聞く。

サービスを停止させない仕組み　サービスを極力短くする仕組みを設計　

信頼性
壊れてしまっても大丈夫なように冗長化を行う。　様々な枠組みで
性能要件　必要なスペックなどを見積もる。　システム監視　常にサーバは見ていないといけない。常に調べておく。　
バックアップリストアで復旧できるように

機能要件
システム要件　クイズができるよ、といった要件　必ず実装すべき機能を機能要件　問題が出る　正解が選べる　選んだ内容に応じて採点結果が出ること
勤務状況を記録できること　給料計算ができること。
出来ないと困るので、これを定義する必要がある。　車ならアクセるブレーキ右ハンドる
機能要件は顧客が望んでいる要件　開発者と顧客の間で明らかにしやすい。満たして当然だとお客が認識している。　機能要件はお客が満たして当然と考える。
話がしやすい。　品質は顧客が期待する基準を下回る場合は大きな不満となる。　期待する水準以上で提供しても満足しない。できて当然なので。
非機能要件
故障で業務に支障が出ないか　どれだけ軽快に動作するか　利用者が増えても安定するか　トラブルの発見と対処は迅速か
普段は怒らないことが定義される。　クイズを作りたい、勤務表を作りたいといったことをしたい、バックアップリストアを作っておかないとトラブル時に困る。
非機能要件は顧客も意識していない。暗黙の了解事項として期待している。トラブルの発見などはお金がかかる。顧客が期待し求めている品質を明らかにするためエンジニアから話す必要がある。

要件定義の中で入念な話し合いをして、顧客が期待し求めている品質を明らかにする必要がある。　いわなくてもやってくれるでしょ、で暗黙に行う。
言わないから作りませんでしたｍ、ではなく言った言わないことを行う。
バックアップを一切取っていないからアプリやシステムは廃止する、みたいなことが起きる。
非機能要件は満たせば満たすほど満足度が高まる。開発や構築の場面では特に重要。

仮想化
一般的にWindowsアプリはMacやLinuxでは動作しないが仮想化ソフトを使うと解消できる。MacのWordはMac用に作り直したプログラム。同じ動きをするものにはなる。
仮想化ソフトを使うと動かせる。　Windows上で動く。仮想化ソフトをインストールするとLinuxを動かすことができる。一台のPCのOS上で複数のソフトを動かすことができる。

vmware







































