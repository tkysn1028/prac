DB設計

初めに
論理設計ともよばれる

システムでどのような情報をどのような形で保持するのか
物理設計はハードウェアとデータ配置を設計する
インフラエンジニアの範疇
アプリ開発者としてデータ配置を勉強

テーブルの作り方
①エンティティの抽出
②リレーションの表現
③属性の抽出
④主キーの検討

システム化する必要がある情報
物を売るのなら
商品
顧客
注文
在庫

まずはシステムで使う必要のある情報を抜き出す

RPGなら登場人物や体力power数値
システムで使う必要のあるデータを使う。
抽出は管理する必要があるか？
ダウンロードデータなら在庫の概念はない。

リレーション表現
関係
エンティティとエンティティを結びつける
顧客と注文がつながり、注文と商品がつながる商品とIDがつながる

リレーションもシステムで管理する必要がある

顧客と商品は結び付かない

顧客と商品と注文

商品固有の情報

合計金額：商品が何個売れたかで出てくる
ある項目から算出できる項目を導出

同じデータを持たない。メンテ大変だから。

単価や税率は変わるため基礎データが変わるため
導出項目だけど持っておく必要はある。
あとから追加が難しい。画面や帳票のデータ項目を

テーブルも何個も何個も同じデータは持たない。

主キーの検討
エンティティの1データを特定する属性
一意識別子
顧客コードを

大事なのはエンティティを特定するのが主キー
注文エンティティには商品と個数が含まれる
注文書の神のイメージ。
5個以上買うこともできる

2つの組み合わせで一つの票を作る。
リレーション属性主キー

①マスタ系エンティティ
共有性が高くデータ発生や変更が少ない
②イベント系エンティティ　トランザクション系エンティティ
データの発生や変更など
注文や在庫売り上げ
③
サマリ系エンティティ
定期的に1②の集計をしたもの
大規模なデータ用
処理速度向上のためなど

正規化
エンティティの属性を抽出したら正規化を行う。

データの重複をなくす。
データの追加更新削除

第一から第五まで
①
繰り返し出現してるデータをエンティティに分ける

注文コードだけでは特定できないので商品コードと組み合わせる

②
商品名と単価は商品コードだけで一意に特定できる。
→分割

これをしないと、こんぼうを2個買って注文した場合こん棒が2か所。
商品名が変わったらいちいち全部直す。
だから変える。

③
きーではない属性の関係

フィールド項目定義

テーブルを作成
抽出エンティティはテーブルのふぃーーるどに。

フィールドは5つを設定
①データ型
文字、数値、date timestamp


ルール

演習課題の進め方
1か月目：：

課題に従って成果物を作成
実行して動作を確認
動作に問題なければ成果物を出す

レビュー

gips java
main branch



























