①
入力方法：コンソール

①数字を入力
②オペランドを入力
③数字を入力
③→④
ここが計算する場所

④結果を出力
⑤後の処理を入力
閉じるかどうか？再度計算を入れるか？


ようさんからその

①数字A
②計算記号
③数字B

→結果を戻す

①数字を受け取ってtruefalse

②計算記号+-*/をくれたら数字を受け取って結果を返す


①stringを検証して、数字かどうかを検証する機能
②文字列を数字に変える機能　
int?double?→全部doubleにする。

src→slackに
計算？


文字列を

/*-+
→計算記号
増やしたい

→＋－×÷
1+2
→enter
→結果出力

無限ループは抜けられる？
→途中でyとかnを入れたらどうなる？


④
記号を入れて、正しい記号かチェックする

⑤
メソッドは別クラスにまとめる

⑥
文字列か数字か判断する

7
.0は要らない
整数は整数で計算したい



①リファクタリング
スキャナをフィールドとして入力



コー度を最終で確定させてから書き始める方がいい。

コーディングしない時間

→最初の３分の一を目安にするといい




--------------------------
実装手段
バックエンドのフレームワーク：





springboot

①
価格による家電検索プログラム

最低価格と最大価格を入力
入力された価格の範囲内にある家電製品を出力

クラスは家電製品ごとに作成

入力系
webブラウザ
input type

DBで直接入力する
①DBの表をデザインする
②データを直接


出力系
webブラウザ

tableで出力


→後で

家電製品のデータを作るときに日本語
A5
価格の内容はブラウザ
その時にA5を使った方がいい？表を作るDBを用意するために使う

入力系はブラウザ？→OK


電卓と同じ入力系にする？
→
DBは使う？
→JDBCドライバが必要　設定が面倒

application.properties

コンソールだと

入力系もspringでやるしかない　ブラウザで入力を確認する

springboot試しに立ち上げる？
→
DBとの連携も合わせてやっておく







--------------------------
3時間＋明日の4時間

計7時間使える計算

7/3＝2.3時間

今日要件詰めて書き始めるのが理想です

やり方はさっきのように15分区切って適宜報告

10分読んでみて、
大まかな作業の流れをつかんで共有

--------------------------

1時間＋明日の4時間
5時間
5/3→1.6

①
Java
入力：コンソール

クラスを作って
getterとsetterを作って


出力：コンソール
→
tostringオーバーライドしてsysout


main処理をどっちがやるか？
→無限ループとか、
一番大変

一つのプログラムに一つのプログラム
クラスをインスタンスにして価格を先に入力



----------------------仕様書------------------------------

・クラスは4つ作成。
①冷蔵庫クラス
②テレビクラス
③CSVファイルデータ取り込みクラス
④main処理クラス

+⑤　①②の親クラスを追加


・データの取り込みは外部のcsvデータファイルを読み込み、そのデータを検索

・以下各々のクラスについて説明する。


①TVクラス
・フィールドと値セットのコンストラクタとゲッター。
商品名　name
ブランド brand
価格 price
画面サイズ size
無線機能の有無 hasWifi
製品情報 getInf

+仕様追加のためname,brand,price,getinfを削除

②冷蔵庫クラス
・フィールドと値セットのコンストラクタとゲッター。
商品名 name
ブランド brand
価格 price
容量 capacity
製品情報を表示する getInfo
+仕様追加のためname,brand,price,getinfを削除


⑤
商品名 name
ブランド brand
価格 price
+discount,premier,realpriceを追加



③
冷蔵庫とテレビの情報のファイル.csvを作って置いて、
このcsvを読み込んで、各エンティティのクラスにいれて、
TelevisionエンティティのListを作って返す

④
+機能別に2種にmainを分けた。違いは値引き率とブランド名の選択部分のみ。


冒頭：無限ループ発生　breakで処理を抜けられるようにする

1.価格を入力させる
最低価格
最高価格は？
+ブランド名は？
+最低割引価格は？
+最高割引価格は？


終了後に値が正しいか？をチェックする

正しければ2
違ったら1へ戻る。

2.検索
list(出力用）を準備。クラスは新規クラスを作らずに冷蔵庫クラスをそのまま使う。

繰り返しfor{
	string str = list.テレビ(index).価格を取得
	if(最低価格<str<最高価格){
	list(出力用)にadd;
	
}
というイメージ。
以上を冷蔵庫とテレビにて実施。


+検索機能を追加。
①ブランド名
②割引価格

①
.equalsで内容を検証

②
最低希望値引き率×価格　＜実際の値引き金額＜最高希望値引き率×価格
で内容をソートしている。




冷蔵庫list.add()
テレビlist.add()

テキストファイルから読み込ませる
→
どう値を取り込むか？





親クラスは家電クラス




｝


}


陽さんにやってもらいたいことリスト



①ファイルがある→読み込む→list（テレビクラス）とlist(冷蔵庫クラス)をmainに渡す







形式は？

ファイルがある
→ファイルを読み込む
→読み込んだ内容をリストで渡す？

これだけくれたら後の処理はこっちで

②
値チェック（stringの数字が来たら値が問題ないか？文字列じゃないか？

③
parsedoubleでstring→double

main(string)
→

時間区切りを何分単位でやる？
→
次何やるか？を10分間ブレインストーミング

①機能追加（フィールド追加、機能追加など）

②プログラムの細かい手直し

③リファクタリング
①と③は一緒。リファクタリングしてから機能追加する方が楽

機能追加、フィールド追加の際の改修作業が大変
実装は今のままでいいので、
プログラムの動きを変えずに実装を行う。

・streamAPI→フィルタリングが見た目にも分かりやすく実装できる。
・継承→親クラスにまとめることで処理を1個にできる。
→メソッドの追加、値の追加も簡単になる。

・データ元の編集CSVファイルのフィールド追加
→CSVファイルで追加
→クラスの修正


実売価格の追加

元々売っている価格→今の価格
実売価格→9000にスラッシュして値引き

→

実際に売る価格のみDataに追加すればいい？
例：値引きされている価格、プレミア価格（価格の上乗せ）

→値引きされているかどうかの判定もあった方がいい？

実売価格÷元の価格


コンソールに表示する
増加する

親クラスを作って、家電クラス　冷蔵庫クラス
価格クラス

・値引きセール品、プレミア価格をデータに追加
・同時に表示すると不都合になる　
・継承を入れて解決
・家電クラス　冷蔵庫クラスextends　テレビクラスextends
共通する処理を家電クラスに
コンソールで価格の範囲を入力して　値引きの価格があるときは値引き、プレミア価格であればプレミア表示。

①dataに追加

②
コンソールで価格の範囲を入力して　値引きの価格があるときは値引き、プレミア価格であればプレミア表示。
void getinfo(){

	if(値引き!=0){

	system.out(値引きあり)

	}else if(プレミア価格!=null){

	system.out(プレミア価格あり)

	}else{

	system.out(通常価格)

}

}

値引き率→mainで計算してフィルタリング

値引き率が毎回変わる
→いちいち修正するのは大変なのでmainで

実売価格、プレミア、値引き

→
実売、値引きかどうか、プレミアかどうか、

プレミアは別々

品質が高いやつ

日立の商品が値引き

実売価格と値引きされているかどうかを判定する？
検索する機能→商品で値引きされているか、

プレミア価格と値引き価格と実売価格

2つフィールドを追加する！





-----------------------------------------------------
クラス｛
番号
商品名
単価
数量
温度


｝

１　商品展示画面
２　在庫管理画面
３購買画面
４お金の管理画面



















商品クラス
取り扱い商品

コンソールに商品と単価、売り切れ状況の表示

商品の在庫追加

商品購入
購入する商品の選択
投入する金額の入力

購入した商品とおつりを表示

お金管理

自動販売機の中の硬貨と紙幣の在庫を管理
商品を買えば効果と紙幣の枚数は増減する



入力は何か：


・購入商品の選択
・投入金額の入力


出力は何か：

最初の表示フェーズ：

・選ぶ商品と単価
・現在の商品の売り切れ状況
→無限ループと終了条件

選択と金額入力フェーズ：

在庫とお金の管理フェーズ：
アクセスするには特定の条件で


値の持ち方
リストとクラス

main{
list(item)
}

map(index,name,price)
map.get(index)


→itemは使わない




class item{
private index;
private name;
private price;

}


⓪
itemクラス｛

商品名
インデックス
売り切れかどうか、
現在の在庫数
｝

硬貨クラス{
private int 10000円の数
private int 5000円の数
int .....


－メソッド
{

}
＋メソッド


}

処理と枚数

増加したり減少したりする
.set(10000円の数 - 1)







①自販機の最初の画面

何を買う？を表示して選択させる役割の画面
無限ループ開始｛
for(今ある商品リスト）{
system.out(商品とインデックス、売り切れ表示のセット\n)
}
scanner 買う商品のインデックスを表示して下さい
入力値に異常値チェックの処理
異常：文字列ではない+doubleではない+今あるリスト.sizeの範囲か？


②
system.out(金額を投入して下さい)
system.out(硬貨と紙幣の数を入れてください）
硬貨；〇〇枚
紙幣；〇〇枚

scanner 金額
入力：金額を入力させる

③
system.out(これでいいですか？）
y→計算処理へ
n→①へ戻る　break;

計算：

①在庫数を－１
②硬貨と紙幣の数を－していく


例：一万円入れると

どうなる？
①1万円札+１
②以下の計算アルゴリズム
①の金額入力→硬貨と紙幣の枚数出力
のメソッドを作る
→一人が担当

もう一人がmainメソッドの処理


	%・・・
	1本の飲料を買う
→160円を出して9840円戻る
	9840　% 5000 = 4840
	9840 / 5000 = 1(int)
	
	4840 % 1000 = 840
	4840 / 1000 = 4

	840 % 500 = 340
	840 / 500 = 1

	340 % 100 = 40
	340 / 100 = 3

	40 % 50= 40
	40 / 50 = 0

	40 % 10 = 0
	40 / 10 = 4


処理としては0になるまで金額を割っていく
その分
5 1 →なし
?

→お釣りの分－記録

④
購入しましたの画面
お釣りが出る
③のロジックで出た内容の硬貨と紙幣が出る


①へ戻る

⑤
在庫管理画面

⑥
金額管理画面

①とかでadminとか入力したら管理画面に移る。




⑦
紙幣かいずれかが0になったら終了する






戻り値と入力値だけほしい


・投入された硬貨と紙幣の数をもらう
・選んだ商品の金額をもらう
・メソッドに引数を渡す

calculate(thousand,hundred, ten,選んだ商品の金額price,){

・受け取る引数は投入するすべての紙幣と硬貨に設定
・それぞれに該当の単価を掛けて合計金額を算出
sum = thousand * 10000 + coin.get2 * 5000 + coin.get3 * 1000 + coin.get4

・投入合計金額に単価を引いてお釣りを算出
int sumA = sum - price

・10000円から10円まで
①余りを算出して代入
②割り算した内容を紙幣硬貨のそれぞれのインスタンスの値に－していく

sumA = sumA % 10000
tenthousand -= sumA/10000 

sumA = sumA % 5000
fivethousand -= sumA / 5000
・
・
・


return tenthousand,fivethousand,・・・・


値を受け取る



}

設計：
チーム→方針の共有

商品を選ぶ
お金を入れる
商品が出る
お釣りが出る

お互いどう作るかのイメージが共有出来ていない
・画面をどう操作するか（アプリ→UI画面とか）
画面をどう操作するのか
ユーザーは何を入力するのか
お金を入れる（使う人はお金をどう入力するのか


・データをどう持つか
エクストラexercise
manageCoinクラス(java基礎２エクストラ）
持ち方で実装が変わってしまう。



















