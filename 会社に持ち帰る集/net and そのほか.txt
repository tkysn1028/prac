ネットワーク
ローカルではなくインターネット
ネットワーク
ごく普通にネットにつながった携帯やパソコン
ネットとは何か
何と何がつながっているか
ブラウザと
ネットワークの仕組みについて
ネットワーク

・ネットワーク
・インターネット
・LAN
・WAN
・ネットワーク管理者

ネットワーク管理者

インターネット
ネットワークは複数の機器を接続して相互に通信する
会社で社内ネットワークを構築して行う
自宅でサイトを見る
ネットワークは世の中にたくさん
それぞれは別のネットワーク
会社から別のネットワークを津j投げることはできない
ネットワークの集合体
世界中のネットワークを接続した巨大なネットワーク
インターネットはプロバイダと呼ばれる事業は時きゃいえやくする。

契約してネットワークを利用できるよ
WAN・・・遠隔地のネットワークを連携　地域や国を結ぶ
LAN・・・ローカル　会社企業など　独立しているので勝手には繋げない

WAN　インターネットLAN

インターネットにつながらないみたいな環境

一般の電話回線や専用線など
インターネットなどでLANをつなげる

自宅のネットワークでネットに繋がらない、みたいなネットワークの面倒を見る人


ネットワークには面倒を見る人が必要
一般的にPCのっ機器運用管理保守
ネットワークの効率保持
基本的にだれかが何かをする

インターネットの管理者はいない
典型的な自律分散システム　LANの管理者　自分のネットを運用してルールを守ることで何とかなっている
ご自宅でやって
見ず知らずのネットワーク同士が相互にやり取りするよ

ネットワーク　複数の機器を接続して相互に通信
それぞれのネットワークは別のネットワーク

ネットワーク初歩
ノード
伝送媒体
ルータ
パケット

NAS
ノードとdノードの間を結ぶものを伝送媒体
インターネットと家庭用LANをつなぐ。
WAN側
LAN側
の2つ。PCとLANの中でつなげる。
業者が繋いだWANに綱江ゲル。パケット通信

ネットワークを流れるのは128バイト
8ビットで1バイト
パケットはデー多を
何でこんな分けるの？
デー多を占有されてしまうのでされないように。
複数のノードの複数データ通信。
実務は使わない。

複数のノードが複数のデータ通信。

OSI参照モデル
ネットワーク構成の基礎概念
みんなが誰もが通信できる仕組み

プログラムそのものではない。

データ通信はメーカ独自の通信で実現していた。メーカーの異なる機器では接続できない。
不便んあのでISOメーカーに依存しないデータ通信を作った
メーカーの枠を超えて通信する

通信機器が持つべき機能を階層構造で分割
ネットワークエンジニアとしては基本知識

ビット列を電気信号に変える　物理層
アプリケーション層
ブラウザでwebページを作成　データを受け取るなど

ノード間で通信すると順番に処理する
各層を順に通ってデータが流れる。宛先カプセルか
各層事にヘッダをつけていくカプセルか。

つけて次の層で渡す。送信側の2層と受け取り側の2層で
受信側では使い終わったら捨てる　非カプセル化

階層構造にする利点は他の層を意識する必要がなくなる。自分の層の未意識すれば何とかなる。
通信が有線か無線か、有線か無線家は

全部まとめるのは大変

OSI参照モデル
カプセル化

TCPIP
プロトコルスタック

NIC
カードで実施。別売りだった
無線LANでつなぐのが当然なのでマイナー

イーサネットの規格で5より下は売っていない。
カテゴリはケーブルに印字されている。

MACアドレス
すべてのパケットをノード全部に届ける。
繰り返しで実現
複数の端末で同時に送る
破棄しないでチェックすると通信のセキュリティがやばい。
自分宛かどうかはMACアドレスでチェックする。
NICにアドレスが降られていて、被ることはない。

MACアドレスを付与してレイヤに投げる


ネットワークインタフェース層
MACアドレスはどこで識別
無線でもMACは使う

実務で出会ったベースで覚える
IPでノード間の経路制御。IPより上はMACを気にしない。
通信相手までの経路制御
海外まで探さないように

ネットワーク上ノードの識別

デフォルトゲートウェイ
設定しないと自分がいるネットワークの外にできない


DHCP
自動でLANのIPアドレスを割り当てする。



①idについて
空文字だったら
メッセージを出して
テキストボックスの背景色を変える

②
テキストボックスname
空文字だったらメッセージを出して
テキストボックスの背景色を変える

③
他のテキストボックスについて繰り返す

④2つのパスワードが異なっていれば
メッセージを出して
テキストボックスの背景色を変える

⑤
パスワードの文字数が10未満であれば
メッセージを出して
背景色を変える

⑥
loginを表示する

繰り返し部分
これがメソッドになる。

エンジニアの一日

余裕をもって出社
朝会
進捗確認
チーム内情報共有
メールチェックと事務作業
ソースコード作成


朝会
チームの状況確認とチーム作業指示
打合せ資料作成
外出して打合せ
ソースコードレビュー

頑張って作ったプログラムがエラーで動かない。どうしたらいいのか分からない
エラーは出るもの。
慌てずエラーの原因を調べて解決できる

文法エラー
実行時エラー
温りえらー

スタックトレース
例外処理が出力される

セキュリティ
情報漏えい
理由と原因
自分とは関係ない
事故はごく簡単なことで起こる
インタネットとコンピュータを安心して使い続けられる
情報セキュリティはネットワークやコンピュータを安心して使い続けケル。
普段使っているサービスが急に使えなくならないように必要な対策をすること。
情報セキュリティ対策
私たちが会社組織の一員の自分たち
会社組織が保有する情報の部分
資産の情報や資源としての情報を
機密性
完全性
可用性
機密性：ある情報へのアクセスを認められた人だけがアクセスできる
認められない人はアクセスできないようにする。。
フォルダのアクセス兼載設定
完全性
情報の破壊改ざん消去されていない状態を確保
不正に情報操作できないようにする
デジタル署名
アクセス履歴
変更履歴
可用性
情報アクセスを認められた人が必要な時に中断することなく情報をアクセスできる　事業の継続や早期復旧する
何かあった時に元に戻せる。

情報セキュリティの重要性
事故を起こすと取引停止損害賠償行政指導
会社に大打撃
社会的責任を果たすため法令を遵守するため事業継続性を確保するため
仕事がなくなるよ

会社対会社でも同じように起こる
情報セキュリティ対策は欠かせない
そもそもセキュリティがザルだったので今はセンシティブ
セキュリティ事故の原因と対策
紛失置忘れ
誤送信誤操作
人
管理ミス
セキュリティについて決められたルールを守ることが大切　
部屋入る前にボディチェックとか　
メールのセキュリティ対策
送信前に宛先と内容再確認
重要情報は暗号化した添付ファイル
テキスト形式で送受信
html形式だと変なプログラムを作れてしまうのでメールを送るならテキスト形式
CCに記載されたアドレスはすべての受信者に見える
bcc:受信者に見せないようにするならbccにする

パスワードとセキュリティ対策
PC保存したり書き留めて貼り付けない

推測されにくいパスワード
PCは個人所有PCの業務使用は原則禁止
PCの画面ロックを行う
業務に無関係なソフト、フリーソフトはインストール禁止
ロッカーに施錠管理する
携帯電話などのセキュリティ
指紋認証顔認証による画面ロックや遠隔ロック等を設定
信用できないWi-Fiにはアクセスしない
メールや番号を不必要に公開しない
情報保管持ち出し廃棄
情報資産河畔機器には盗難対策
施錠保管実施

重要書類を机に置きっぱなしにしない
会社外への持ち出し禁止　鞄を体から離さない
鞄にカギをかける
鞄を持っているときは眠らない
必要なく鞄から出さない　バインダーやクリアファイルに閉じる
biospassをかける
紛失しないように

ゴミ箱に機密情報を捨てない
セキュリティ事故が起きたらすぐに上司に報告
なくしてしまいそうなら報告
守秘義務　外部に個人情報や営業情報を漏らさない
顧客名やPJの内容を関係sh以外で話さない
エレベーターホール　公共スペースなどはブログSNS掲示板に書かない
会社の教育どうなっているんか





--------------------------

質問トレーニング

いい質問ができるように
質問しないといい質問ができるようにはならない
質問とは
分からないところや疑わしい点について問いただす

分からないことや疑わしい点があれば質問する、なければ質問しない
作業の指示を出した人にこれはどうすればいい？
情報を明確にし共有する
考えるきっかけを作り解決策を見つける。
思い込みによる制限を外す

分からないことがあるかなしかに関わらず質問をする
情報を共有する、といったこともあるのでこみにゅケーションツール
人生を豊かにする
いい質問はプラス、悪い質問にはマイナスの効果もある

ヒューマンスキルでもある
いい質問をしようとして意識して質問することで少しずつ身についていく

相手と良い関係を築く

日常会話で質問すると感心を持っていることを示す行為に繋がる

自分で何とかしたいんだな
相手に好印象を持ってもらう
多少無理やりの質問でも
自分でできる範囲で行動してみる。ITトラブルを全て
質問は一通り

時間を意識する。最初の１５分は自分自身で解決を試みる　１５分後も解決していなかったら必ず人に聞く

質問したくても質問できない
何が分からないことが分からない
はっきりわかっている部分とそうでない部分に分けよう。カオスな状態を解こう。そうすれば質問できる。

明らかにわかっている部分と分からない部分をしっかり把握する。
質問してみる

分かったつもりに要注意
分かった
分かったつもり
分からない

分かったつもりは厄介
①抽象的な言葉を具体的な内容に言い換えてみる
②得た内容を他人に説明してみる
③得た内容を実際に行動に移してみる
何を言っているのか分からない

①質問する側だけが知る序不応を前提に話す。
②質問する側の意図や目的が伝わらない

悪い質問といい質問
①作業が進まない時間②質問した側の成長③質問された側の心象

分からないことをそのまま放置するのはダメ
調べればわかることを質問する
質問した側の成長と質問された側の心象

その場限りの質問をするのはよくない。
やり方を覚える

無駄な時間は過ごさないように

詰まる→前に進めることができない
つまり前に進めるためにできることがある
前に進めるためにできることをしていないのだから、詰まっていない。

nullpointer
相手が知らないものを指す指示代名詞は使わない。

主語や述語が抜けがちになる
最終的に実現したイゴールも共有できるとベタ

今回はうまいこと伝わらなかったので次はうまく伝えるようにしよう

--------------------------

インターネット検索を活用することである程度トラブルを解決できる
google
独自技術で検索している検索者に合わせた動画も検索している

yahooの検索アルゴリズムを使用しているが
基本的な検索方法
完全に一致するごくを検索する
半角マイナス記号

in:本文にjavaが含まれるページを検索

検索ワード
ヒットしそうな単語を半角スペースで区切る
検索ワード並びで結果が変わる
検索ワード　使い方

検索の心得
検索結果から求める情報を取捨選択する
内容の浅いサイトや更新されない個人の投稿が上位に出がち
サイトを開く前に見えている情報をチェック　ノイズが多いよ
一つのサイトをじっくり見すぎない
複数のサイトを調べて情報の裏付けを取るとベター　いくつか見て同じことを言っていたらより良い

社会人になると
まずは社会人になることを自覚すること　
社会人とはそもそも何か　学校や家庭の保護から自立して実社会で生活する
自立して実社会で生活すること
自立とは何か　経済的自立　自己管理　自己責任
こういったところがd系ることが人湯。
仕事をすることで自分の生活費を自分で稼ぐ収入に応じた成形を立てる。どう使うかは自由だが無計画に浪費することはよくない。
ギャンブルみたいな浪費はしないでね

自己管理
自分の健康状態を管理して生活リズムを正しくして下さい。睡眠時間を十分に確保する　約束の時間をしっかり守る
約束はちゃんと守ってね
自己責任
他人任せ、面倒なことを自分の頭で考えて最終的に自分の責任で物事を判断しようね　騙されてもちゃんと考えて行動してね
自己判断に迷う場合は上司先輩に相談してね
家族とか
最終的なジャッジは自分で下してね　勉強しろとは言われない。スキルアップ等は学ぶも学ばないのも自分の判断
プライベートな時間をどう使うのかは自分次第
自分の時間は自分で管理してね
コミニュケーション　苦手は６割　楽しくコミニュケーションはできても苦手意識も高い
複数の人の前で発表することが苦手
エンジニアでもコミニュケーションは仕事になる。
仕事が円滑に進む　職場の雰囲気がよくなる　働きやすい　困ったときに助けてもらえる
拒絶すると上手く進まない、ボッチになるよ
相手と良好な関係を築く　相手の存在や考え相手の話をしっかり受け止める
意見がそうであることを否定しない、理解しているよ　軽んじたりしないよ
自分の意見を言ったときに頭ごなしに否定する、軽んじることはない。
そういう意見を持っているんだねと認める。
相手の方をしっかり向いている　表情や声で合図地を打つ　大事なことはメモを取ったり複勝する　聞くという姿勢が大事
形からきちんと入っ手相手の言うことを聞く　相手が安心できる

気持ちよく挨拶してね
イベントに楽しく参加する
笑顔で会話する　自分から話しかける　何かしてもらったら感謝の気持ちを示す
気持ちよく挨拶してくる人は大事だよ
イベントに楽しく参加する　お酒が苦手ならランチ
相手に対する断り方を覚える　笑顔で会話しよう
自分から話しかける　自分がしてほしいことは相手にする
きっかけを求めているはず
何かしてもらったら感謝の気持ちを示そう
一言お礼をしましょう
コミニュケーションの手段と特徴	対面　電話　メールといった手段
適切な手段を使い分けて組み合わせる
スケジュールや場所の確保、移動の手間や時間がかかる　手間をかけて会いにきてくれたという行為が相手にとって気持ちとして伝わる
電話　あまり制限されずにリアルタイムで会話ができる
お互いの表情が伝わらない
メール	相手の都合にあまり左右されずに手軽に内容を伝えられる　送信内容は証拠として残り、CC　BCCを使うことで第三者tも情報共有が可能
急ぎの要件は相手次第なので急ぎの要件には不向き　誤解も生まれやすいので相手によって言葉や表現は身長に選ぶ
オンラインコミニュケーション
テキストやチャットアプリ、音声、ビデオ
手軽で取り入れやすい。相手との時間を合わせる必要はない。堅い、冷たい等の印象を受けやすい。ビデオも直接対面でのコミニュケーションとは大きな差はある。

話す時も聞くときも笑顔を心掛ける
話す時は言葉の抑揚を込めて勘定を込めると気持ちよく意思疎通ができる
出来るだけマイクとカメラはオンにする
お互いの様子が見えるように
基本zoomを使う際もずっとzoomをオンにしているわけではない。
お互いの様子が見えることでコミニュケーションがとりやすい
作業に適度な緊張感が生まれる
素早いリアクションを意識　すぐに返信があると相手に安心感や信頼感が生まれる
了解しました。よりもスタンプを取り入れるのは結構いい。石を伝えるときも相手の印象は大きく変わる。TPOは注意。

上司にはわきまえる
オンラインでも雑談が大事　一緒に働く者同士での気楽な雑談や無駄話はチャットの雑談用チャンネルとか。
昼ごはんでこんなん食べた、とか。
ほうれん草本質は情報の共有。相手から尋ねられるのを待つのではなく自分から進んで行う。
報告：
指示した作業に修正が必要か　スケジュールに変更が必要か　緊急の対応が必要か
判断に関わる報告がなかったり遅れたりするのはまずい
タイミング内容やり方
一日一回定期的に報告する。作業進捗等を報告する朝会夕会がある。予定していた作業に変更が必要
ミスしてしまったとき
作業の官僚は自分勝手に決めるのではなく上司に報告することで完了する。　予定していた作業に調整が必要な時　考えていたやり方ではうまくいかない、調査が必要
予定していた作業に影響が出そうな時は取り掛かる前に上司に報告する
勝手にジャッジするとまずいので一旦報告
上司が知らないと思われる情報を得た際には上司と共有する　ミスをしてしまったとき　すぐに報告する
さっさと上司に報告して前向きに　内容　行き当たりばったりで話すのではなく結論を相手に早い段階で伝えられるように整理
時間経過を追って話したって分からない　結局何が起きたのか最後まで聞かないと分からない
相手が知りたいのは結論　今後どうするのが最適なのか上司は報告を受けて考える
事実とそれ以外を分ける　事実ではない情報は物事の性格な把握にはむしろ邪魔。
曖昧な表現を避けて具体的に表現する
１時間ほど、とか具体的に報告
不快にさせるとプラスどころかマイナスになることも　相手の都合　報告の手段　内容の重要度と緊急度

緊急のご報告です　家事が発生しました　消化対応をしています
重要度と緊急度は自分で考える必要がある。
相手にとっては緊急度が高い　

システム開発基礎知識
IT業界の基礎を学習してもらう
システム開発の流れやプログラミング
コンピュータ：複雑な機械
パソコン：個人向け
コンピュータ：PC　サーバ　メインフレーム　組み込みシステム

サーバ
ネットワークを介したリスポンスを返す
大き目のサービスであれば多数のコネクションを確立するため普通よりスペック高い
企業や銀行などの金勘定のシステム根幹をなす
IBMメインフレームの銀行のアプリケーション　直接
組込みシステム
家電製品とか携帯とかテレビエアコンなど　コンピュータ内部の制御家電の価格に影響する
パソコン低性能で低スペック価格要件が強い。
演算制御記憶入力出力

演算制御：CPU
記憶：メモリ　HDD　SDD
キーボード　モニタプリンタ
マイク、タブレット
実際は５台装置だけだと動かない
マザーボード　差せるパーツはスペックによる
ソフトウェア
①アプリケーション　②OS
重さとか形はない

システム開発の流れ
システムの一生　企画企業が営利目的でつくる　何のためにシステムを使うのか　利用者はシステムを使って何をしたいのかを決める
エンジニアは要件定義から
システムに求められる機能や性能を決める。おおざっぱなレイアウト
システム開発はどんなものを作るのかを大まかに決める。物を作る人はこのタイミング
開発	物を作っていく
そこまでに開園できるまでもっていく
システム設計、製造、試験を行う。
運用
システムを日々動かしていく　システムの移動停止バックアップの作成保管
状態監視や以上発生時の連絡
保守
開発システムを改善変更する
原因究明解決、機器の交換アプデ
開発より運用保守の方が長い
システムの作新によって使用っステムの利用終了
システムライフサイクル

開発だけが仕事ではない

開発
設計、製造、試験という工程
抜かせないし入れ替えはできない。
設計書作らずに製造するのはあまりしない。していてもあるごりズムはできている。
試験工程と試験項目書試験結果など工程ごとにあらかじめ決められた成果物を作る。
ウォーターフォール
古典的ながら工程ごとに完了するまで次の工程には進まない
完了したら戻らない

工程が完了した時点でその工程での成果物
ユーザーの意見を反映しにくい
戻れないのはいつまで経っても進まなくならないようにするため。
無制限に受け入れることはできない。仕様変更が難しい。思った通りのものができていない、とか。
アジャイルモデル：設計製造試験を短い開発期間単位で開発を繰り返すことでリスクを最小化
デメリットは進捗の把握が難しいのでマネジメントがきつい。技術スキルと仕様変更に対する対応力、コミニュケーション能力などが必要。
プログラムが動く仕組み
子んぴゅ０－多が解釈できるのはマシン護のみ。CPUが読めるのはマシン護。一応が欠けると指示ができる。
コンパイラJava
インタプリタJavaスクリプト
コンパイラは翻訳するだけで実行はしない
インタプリタはソースコー度を１行ずつマシン護に翻訳するソースコード
修正と動作テストを繰り返す際に作業性が悪い


サーバサイド側で異常値をチェックして

Javaスクリプト呼ばないで操作できてしまうのでサーバーサイドの方が安全。

通信した結果ダメだったという場合は通信が重くなるので全部やるべきではない。一部クライアントサイドで実装するイメージ。

#button1のボタンをクリックすると動くよ
function(){}以下の内容を実行
.ajax({
url
datatype
cache
といった内容を受ける
urlの内容でｈｔｍｌで
success functionで成功後の処理を行う。

}

円滑に仕事を進めるための礼儀作法　初めて会う人も多い。
ビジネスマナーの重要性　仕事は多くの人とかかわる。社員、協力会社、顧客等とかかわる。
ビジネスマナーをないがしろにすると相手が不愉快になる。嫌われる、信頼を失う　協力してもらえなくなる。　次に仕事を頼まれなくなる。
マナーがしっかりしていると相手が気分良くなる。好感を持たれる。次も仕事を頼まれる。
迷惑をかけない　気持ちを察する　交換を与える　相手を敬う
基本的なマナー
身だしなみ、服装、挨拶、態度
不快に思われることはしない
化粧香水は過度にならない　私服OKでも短パンサンダルタンクトップ

お世話になっております　初めて会う人にはこれからお世話になります。　ご無沙汰しております。
指示や依頼を受けた時　かしこまりました　承知いたしました
まことにありがとうございます。　恐れ入ります。

すぐに参ります
只今席を外しており正宇
お客様から来たりしたときは

クッション言葉

お手数をおかけしますが、
差し支えなければ

思っていないことは言わない。
差し支えなければ（相手は拒否することもできる）
失礼ですが

名前を頂戴してもよろしいですか
名前は物ではないのでお名前をお聞かせいただけますか？

徳川のほうは只今外出しております
徳川は只今
徳川はお休み
徳川は休暇を
お送りする形になると思いますが、
明日お送りすることになってしまいますが、

ご苦労様です
→偉そうなのでお疲れ様です
席次のマナー
テーブルを境にして奥川が全体的な上座下座
席が奇数の場合は真ん中が一番偉い

運転席の後ろが一番偉い。

顧客訪問・名刺交換マナー
事前に地図や経路時刻表　名刺入れに名刺を補充する
約束の１０～１５分前には到着
初めての場所はゆとりをもって
訪問前にコートは脱いでおく　自分の社名指名相手の部署名を伝える
部屋に案内されたら進められるまで座らない　鞄等は進められなければ床に置く　相手が来たら立ち上がって挨拶　初対面の時は名刺交換　進められるまで座らない

お昼前は5分前だと休憩の最中なのでお昼休み終わる間際の方がいい。
進められるまでは飲まない
事前に名刺を用意しておく　相手が来たら立って挨拶　切らし気味なので切らしたら切らしているので
相手が来たら立って挨拶
飯田川が先に渡す　上司が先に交換する　名乗り相手側に向けて相手の名刺より下げて渡す
訪問した側が下になるように　持つときは名刺の隅っこ　相手の名前が見えるように
頂戴致します　交換時は相手の目を見て終了まで手は胸の高さで
机の上に相手の座席順に並べて置く　名刺入れの上に名刺を置く。　面談や打ち合わせが終わって帰るときに名刺入れにしまう。

メモとペン初音に机の上に用意　3コールに取る　待たせてしまったら大変お待たせ致しましたなど

相手の社名や氏名を正確に聞き取ってメモを取る　相手の名乗りの後に


内容の確認や復唱を行う。少々お待ちください　失礼いたします。
自社の代表でも継承はつけない。
日時場所社名
今お時間よろしいでしょうか。

アサーティブコミニュケーション
アサーティブコミニュケーションの考え方
自分の意見を相手を尊重しながら相手と良好な関係性を作る　依頼された際に自分の気持ちとは裏腹な行動をする。

１
〇
２
b
3
a
4
a
5
b
6
b
7
b


1
a
2
a
3
a
4
a
5
b
6
a
7
a

9a
b5

プログラミングと設計
フローチャート：：
流れの図
アルゴリズムを記述するための図年齢の合計を人数で割る。開始から終了まで
ダイアグラムと呼ばれる
基本構造
順次選択反復
反復
構造は分割する
mainメソッドだけでも作れる
作成作業の分担が難しい
ソースコードが読みにくい
ソースコードの再利用をしにくい
メンテしにくい
いくつかのメソッドに分ける
モジュールの概念：：
交換可能な構成要素
スタートボタン押下

決済兼を持つ人とか意見が違うので意見のすり合わせが必要。
計画通り完遂させる計画に適切な修正を加えるには適切なスケジュールが必要、進捗の管理とか。
基本的なことをしっかりと理解することで納得して進めることができる。
エンジニアはスケジュールを立てたりもするし、必要なこと。納得することが大事
プロジェクトとは
企画計画事業研究開発　新しいものを考え出す
目的を達成するために臨時で構成される組織や業務のこと　開発が終わるまでのPJ
次のシステムを作る。
人工衛星を作ってロケットを打ち上げる　サービス開始　人工衛星は寿命を迎えたら通信サービスで寿命を迎える前に再度打ち上げ
運用保守
打ち上げを行う。打ち上げてサービス開始　ロケットを作成する　人工衛星を作成　サービスを提供
ロケット作成：打ち上げたら終わり　打ち上げる現場があるならそっちへ
人工衛星作成：衛星が軌道に乗ってサービスを開始
サービスを提供：エンドユーザ　サービスを提供する立場　サービスを提供し続けることで目的が達成
立場が変わると意見が対立する　安全のために小さく軽く　性能のために大きく重く　立場が違うので意見が違う　どれを採用するか？打合せをして最終的な決定を行う。
共通の目的が存在する
人工衛星を使って通信サービスを継続して提供する　人工衛星が軌道に乗っても意味がなくなる。共通の目的を考えて建設的に考えよ
最終的にはぶつけ合ってベストな意見をまとめる　システム開発立場としては目的を達成するためにプロジェクトに携わる　立場が違う人はいる

プロジェクトの成功と失敗　通信サービスを提供できれば成功できないと失敗
QCDも気にする
quality,cost,delivery
人工衛星が打ちあがってサービスが出来ても赤字だと意味ない、速度が出ない、時間がかかりすぎる
ソシャゲ　アプリとしては面白くないとか　品質が重要　3要素は相互関係がある。品質が悪いと次に続ける気にはならない。品質を上げるために残業、利益が減る　品質が悪いと悪い目に会う
QCDを全て上げるのは無理で、トレードオフになる。品質を担保したうえで納期とバランスが取れている
プロジェクトの失敗原因　システムリリース出来なかったとか。原因のそもそもは
プロジェクトに起因する場合の多くは調査不足　技術力を調査していなかった
システムをいじったら何がどうなるか分からない　顧客業務の調査不足　エンジニア集めてもspringboot知らない人ばかり　システムのカスタマイズする際も変に弄るとバグだらけ
銀行とかで文化も変わる。顧客業務の調査不足
計画不良：目的不良（なんかとりあえずシステムを作ろう
体制不良；人の体制がしっかりできていない　指揮や情報共有が出来ていない
見積不良；お金が足りない

運営不良
アサイン管理不良　品質管理不良　コスト管理不良　進捗管理不良
計画はよくても進めてみたら上手くいかない　
個人に起因する失敗原因　価値観不良
標準化不足　こういう時に何を作ればいいのか、理解しないまま作ってしまう
セキュリティ意識の不足　誤った顧客志向（やっぱこういうことして欲しいんだけど→ウォーターフォールは手戻りが発生するので難しい
マスタスケジュール　プロジェクト全体のスケジュール　PMが作成して合意形成　工程の期間　

進捗の管理
物事の進み具合を糊塗ロール　期限までに終わるかどうか　期限に間に合わないとサービスの遅延になる。　タスクが期限までに終わるかどうかが最大の関心





工程
工程の定義と作成する成果物について
進め方によって作業の段取りや内容が変わる
同開発を進めるのか、作るために誰と何を決めるのか
ただ成果物を作って終わりではない
レビューを行って品質を確認

設計：まだ最初
試験：もうそろそろ終わり
いつの段階なのかが分かる
各工程の成果物　
要件定義書：何を困っているのか、それを解決するためのシステムで実現する機能や性能の概略をまとめる
顧客の合意を得る場面　自社開発でない限りは仕事の対価としてお金　顧客との合意を得る。予算とシステム稼働開始日との兼ね合い　顧客の要件全てを常に実現するとは限らない
これから開発するシステムの具体的な機能や厚生を検討する。　設計：何を作るかについて決めてドキュメントを作成する。
システムのすべてについてドキュメントを作成して承認を得る。　そうじゃないものを作ってもお金はもらえない。
設計書のいくつかは顧客向けに作らないといけない
製造工程　プログラムを作る　ソースコード
試験　設計された通りにシステムが動作することを確認して障害を抽出する
システムが設計した通りに作られているかを確認する。
設計書から試験項目書を作成する
システムの動作を確認して試験項目書を作成する。試験項目書、試験結果、障害処理表、障害管理表
設計の工程では要件定義の内容を製造するプログラムの内容に落とし込む。　試験工程をさらに細分化して段階を踏んで進める。
単体試験結合試験統合試験
設計は分ける　基本設計　詳細設計　プログラム設計
基本　システム全体の概要や大まかな機能の一覧画面などの体裁や動作メッセージをといった顧客に見える部分を設計　外部システムと連携する場合はインタフェースの方式と中身を調整して設計
顧客が触る部分、目に見える部分。データの保存方式　外部システムと連携ならインタフェースの方式
システムを知らない人でもわかる話
どんなプログラムを作って機能を実現するか？
プログラム設計　プログラムをかけるところまで書く
ドキュメントのフォーマット
ドキュメントの読み手　読むのは僕らだけではない　ドキュメントを通じて開発するシステムを理解して問題がないことを確認して承認する
レビュー
成果物の妥当性を検証　成果物の問題点の発見
成果物の問題点の発見　設計や実装の改良　情報やノウハウの共有教育　組織の承認
試験工程は設計製造工程でしっかり作り込んだ内容の確認をする。本番は設計製造で実施する
設計製造工程のレビュー実施はシステムの品質を担保するための重要な作業になる。
問題発見の遅れによる影響　設計書で指摘を受けた場合と試験が始まってからの修正は10倍の差　始まってからは100倍以上

ハッキング口座
実際に存在する脆弱性
サンプルアプリをハッキングする。
SQLインジェクション
開発者の意図しないSQL文を挿入　
秘密情報、個人情報の漏えい、重要情報の改ざん破壊
DBの内容を破壊する
画面の入力情報からSQLを発行していた　IDとパスワードの両方ないとデータは取れない
ユーザーIDに--を入れると、パスワード以降が関係なくなる。ゆーざーIDとしてログインできてしまう。
DBを使ったアプリケーションは
脆弱性の原因を作らない実装　エスケープ処理とバインド機構　
エスケープ処理　普通の文字として解釈されるように処理する。普通の文字として解釈されるように処理　文字列をデータベースに置き換える。

バインド機構　予めSQL文を準備してそれを実行するようにする
自前でプログラムを書いた時とかは、JDBCをそのままSQLに使う場合は危険。

XSS
クロスサイトスクリプティング　脆弱性のあるサイトにScriptが埋め込まれて悪意のある偽サイトに誘導される。
複数のサイトにまたがった攻撃
JavaScriptによる攻撃　webページの改ざん　cookieの抜き取り　通信の実行
htmlのテキストボックスに
画面に出すと、埋め込まれた内容がそのまま実行される。
脆弱性を作らない実装
実行環境のアプデ
htmlで特別な意味を持つ記号　レンダリング時に文字を変換する。thymeleafではエスケープ処理をされる。
バリデーション：不要な記号が入り込まないように処理　正答な数字以外は入力できないようにする。
画面の側でやったところで安全とも言えない。　何でも入力できるわけではない。　全部バリデーションで取り除けるわけではない。
フレームワーク自体に脆弱性がある可能性がある。　バージョンによっては危ない場合がある。　バージョンやソフトウェアは確認しておく。
古い互換性
実行環境のアプデは調査してから書き換えしないと上手くいかない。
パラメタ
webページに含まれるパラメタを書き換えて
開発者ツールを使ってhtmlのhidden属性を行うと危険。
脆弱性の原因を作らない実装
設計が重要。
サーバ内のファイル名　SQL全体または一部
セッション変数を使ってクライアントサーバの内容をやらない。








































































