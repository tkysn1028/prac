チーム開発ロールプレイ 続き
①
最初の案内

2
入力させる

左　中央　右


--------------------------

③
6枚中3枚のカードが何か？を選ぶ

④
値を受けとる

5
3枚のカードと値が一致するか？

⑥
〇△の集計

カード絵柄当てゲーム
絵柄入りの6枚のカードのうちランダムに3枚取り出して並べる
位置も絵柄もOK→〇
絵柄のみOK→△
〇と△の合計得点表示プログラム

2名での開発

やるべきこと確定
→
ユーザに入力してもらう部分と入力値の処理に分かれて作業

①6枚のうちランダムに3枚取り出して並べる処理
②入力値をもらう処理
③①と入力値の位置と絵柄が一致するか？するなら〇フラグにプラス１
④①と入力値の絵柄は一致するか？するなら△フラグにプラス１
⑤〇と△の値を出力






postgresでSQLファイル作成してinsert文実行→select文表示も日本語文字化け

文字コードが合っていない

→show client encodingでSJISと表示

SQLファイルはutf-8
sQLファイルをANSIで保存したら治ったのでSQLファイルはSHIFTJISで記述を継続




集約関数MAX使用してレコード検索してもエラー

最大値を持つレコードのみ取得する

select * from t_test_result where score_am = max(score_am)

だとエラー

maxの結果は関数の戻り値ではない？

select max(score_am) from t_test_result;
だと表が出力
→maxの戻り値はフィールド？

select * from t_test_result where score_am = (
    select max(score_am) from t_test_result
    );
だと上手く動いた

selectの

少しPCの起動が重い

→
タスクマネージャーで何個かBGプロセス終了も変わらず
→
更新プログラムが起動して再起動が必要だった

再起動すると面倒なのでいったんwindowsupdateを停止してパフォーマンス改善




新データベースを作成、既存DBを第三正規化まで実行　非正規系ではない
primary key が3つ存在
→
フィールド6つ。うち2つのフィールドが確定すれば残りのデータが確定

primary　keyを1追加して2つのテーブルに分ける

→確認したらテスト内容と日付が確定すれば一意に決まるので、それでテーブルを
2つに分ける方がよい。

①
アルゴリズムを組む

②
それ通りにコードを書く

③
コードを説明する

④
コードを読んでレビューする

整数値入力時に別情報が入った際の処理
例外catch

ループ上で例外catchしても動作に問題ないか自信なかったが問題なくループ最初に戻ってくれた


日付と金額受け取ってポイント数返す処理　
ポイント数は日付に応じて倍率変わる
ポイントカウントアップして最終結果出力

例外処理に手間取る
①金額に別形式が来た場合(stringとか
②日付入力で不正な値が来た場合（13月とか

②で数値でチェックしようとしたが冗長
→
localdate.ofで解決。引数に変な値が来たら例外来るのでcatch

結果
catch(inputmismatch)
catch(datetimeexception) 
で対処。

例外catchよりif文で処理した方が動作が軽いかもしれないが一旦これで提出


springboot起動上手くいかず
エラーでユーザー名とパスが違ってpostgresにログインできない 
文字コードwindows31Jを検出とある
サーバ側の文字コードが違ってユーザ名やパスワードの読み取りがおかしい？
→文字コード変えても上手くいかず

propertiesファイル確認
パス：postgresで問題なく入れる
ユーザー名：間違い
パスと同じにしていて起動しなかった・・・

springでhtmlファイルをディスク上でそのままディレクトリに保存してインスタンス起動しても
移動できない。
→eclipse上でインポートしたら読み込んでくれた。


PCがやたら重い
→
タスクマネージャーで調べたらpostgresのタスクが複数立ち上がっている
springでDB何回か起動しているがDBとのコネクションが切られていないせいで重くなっている？


springboot

→問題なし
Caused by: java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name 'inputform' available as request attribute

リクエスト時にリクエストにオブジェクトのinputformが存在しないためエラー



→記述方法を変えてみた
data-th-objectで調べてもヒットしない
ネットのth:data-objectだと動いた

ids for this class must be manually assigned before calling save()
で詰まる
データを登録できるときとできないときがある

フィールドに適当なstring値を入れたら動く
null値入れたら同様エラー
値が上手く渡されていない？
→
記述方法が違うのでは
修正したthymeleaf使用しているhtml黄色時になっていた
→
コロンをセミコロンにしていた・・・
直したら動いた


ログインデータをデータベースのデータと照合、OKならログイン成功して別ページに遷移
→全データを抜き出してから一個一個照合していたが非効率との指摘
ログインデータをもとにselect文実行、エンティティクラスを返す
エンティティクラスが空であればログイン失敗
あればログイン成功として処理を早くする

@queryでデータを指定
→普通のSQLでは動かない
select * from logintable where id = ?
として?に引数を放り込む場合はJPQLが必要。

→
一旦カスタムクエリで解決。crudrepositoryのexistsby利用して値を放り込んでその値があればtrueなければfalseを返すように実装。
値を取り出す変数を無駄に用意しなくてもよくなる。

→
差し戻しされて
findbyで実装しようとした際に困る。戻り値がoptionalなので型パラメータがnullだった時の処理が面倒。

@queryでも簡単に実装出来そうだと分かったのでやはりこっちで実装しなおす。



入力値が異常の場合、画面に警告

「異常」
①idとnameとpassが空欄
②passと再確認passが違う
③passは英字最低一字

id:
4桁以上の数字



idで合致するuserentityを引っ張ってくる

ない場合

複数ある場合
一つ一つに対してIDとハッシュ化されたパスワードでDBを検索する。

@queryでの実装完了
差し戻し内容の着手
DB上でのパスがハッシュ化されていることを想定した実装


→ひとまず何を実装したらいいのか分からなかったので
①idでレコードをフィルタしてlistで返す
②フィルタされたリストのパスワードをハッシュ化（今回はhashcode())
③ハッシュ化されたパスワードとIDがDBにあるかを調べてあればログイン成功の処理へ

の流れでつくる。


データ登録処理の際入力値が異常の場合、エラー画面に推移
→
①IDは４桁の数字
②全て空欄ではない
③アルファベット数字８文字以上パスワード
以上３つの要件満たしたら登録、できなければエラーで実装
①②はcommonslangで省力化して実装できた
③の実装は正規表現で１行で実装できた

データベース更新処理
要件が登録済みデータの修正機能とだけだったので自由に定義
ログインフォームを流用、IDとパスを入力させて値を選択させる

→用意するHTMLが多い、更新のたびにいちいちユーザーに入力させるのはよくない

ユーザー一覧を流用、一覧表で変更したいデータを選択させてそのデータに対してUPDATEをかける。
→直観的で分かりやすいのでこっちを採用

data-th-eachでlist値を受け渡している場合、list内の個々の値を別ページに受け渡すやり方

名付けている値が引き渡せるか検証 data-th-each= form:"${outputform}"の時のform自体のこと
formを@requestparamで受けてフィールド値を見てもnull
→
無理そう。多分ローカル変数みたいなものだから

data-th-object


一覧表で変更したいデータを選択させる
テキストボックスに入力された値を遷移先に渡すのではなくテーブルに格納されている値自体を遷移先に渡す方法
→thymeleaf側でinput type hiddenにしてボタンでsubmitすると受け渡す値にテーブルの値を設定したら引き渡せた。

テキストボックスに入力させた値を保持しつつ遷移先で前ページの情報も保持する

→
@requestparamで名付けた値を取り出そうとしたら値が同じ
→
thymeleaf側で値をセットしないと受け取ってくれないことが要因。ただ、値セットするにはsubmitが必要。
submitを２つ用意するとボタンが２つになってしまう

→ひとまずの応急処置としてフィールドを用意して、そこに値を入れて別の遷移先でも値を使えるようにしておく。


update文を実行するために
変更前情報
変更後情報
の２つが必要。

全ての情報を更新するため、形式としてユーザ情報のすべてのパラメータを受け取らせてupdate文にかける。
→
update logintable set id = :id,set name= :name,set password= :password where id= :userid and password= :userpassword;

と実行。
→
「クエリは結果を戻しませんでした」とのエラー文。
→
update文は結果を戻さないために出たエラー？
→
update文に
@modifyingと@transactionalの２つのアノテーションをつければいいらしいが、結果は同じ。
→
戻り値型を指定していなかったことが原因（repositoryやserviceの戻り値型をvoidにしていた）int型にしたら治った
JDBCのupdate文　executequeryみたいなイメージ？

認証機能の実装


ひとまずやりたいこととしては

①ログイン画面でログインした場合にのみ他のページが見れる
②ログインしていない状態で他のページにログインしたらログインページに飛ぶ
→
①
ログイン画面でログイン成功→所定のフラグをtrueに
②
デフォルトはfalse。この場合にアクセスするとログイン画面に遷移

→
拡張性やメンテナンス性抜きに考えるなら実装としては

①全クラス共通で使えるインスタンスを用意。なくなるタイミングはログアウトするかwebコンテナのインスタンスがなくなった時
②インスタンスのbooleanをセットするメソッドでtrueかfalseかを全requestmapping postmappingにセット　デフォルトはfalse
③falseだった時にloginにget要求を飛ばす。

①全クラス共通で使えるインスタンスとは？
・staticクラス
→ログイン成功したら生成して失敗なら生成しない、とすることができない。状態を管理できない。
値の保持ならインスタンスでの管理の方がべたー。

・通常のインスタンスは別のコントローラには使えない（今回のソースコードはコントローラを分けている）
→共通で使えるならserviceクラス。これで実装する。


チーム開発演習ロールプレイ2件

2名で開発
javaとコンソール画面のみで電卓アプリ開発

電卓アプリ開発
→入力出力はコンソールで

10分区切って互いにアイデア出し　3セット

10分
①
ひとまずどういうアルゴリズムになるかを2名でブレインストーミング

→入力して計算して出力する、というアルゴリズムを考えた。
＋計算部分は楽だが、具体的にどう遷移するのかのロジックは複雑だと判明
→遷移図作成に時間をかけるという方向性決定
②
遷移図を2人で書いて発表する（作業時間10分）

→もう一名の方が遷移図を描くのが上手いと感じたので遷移図の作成をお任せしてロジックの甘い部分のレビューに回るようにした。

③
遷移図で全体的な流れは完了。（10分）
少し設計部分に時間をかけすぎとの指摘を受けて細かいロジックを詰めることはせずに作業分担を行ってコーディング。30分

レビューと相談の時間（合計30分）

全体としては1時間で何をするべきかまとめられた。ただ、細かいロジックが詰められていないため今後どうなるか

mainの処理は依頼、自分はヘルプとレビュー、テストに専念
①入力値の異常チェックと変換をヘルプ（30分）
②mainの実装が半分の時点で共有してもらい、自分で一から実装し直し＆動くかのテスト
→都度気になるところを指摘
（30分）
③相手が実装完了後にテストとレビュー（10分）
④細かいところの実装（30分）
で実装完了

今回はmain処理を担当、もう一人にはテキストファイルの読み込みとデータの入ったlistの受け渡しをお願い
①要件定義
→40分ほどで完了。役割分担とだいたいの流れを2名で相談して確定させる。
②各々コーディング作業
mainは値入力させるフロント周りの実装途中。進捗大体3分の1くらい。次回ここから

数が増えていくと手を入れる箇所が増える。


メンバ変数の数が違う

テレビと冷蔵庫で共通の内容がある。

共通のメンバ変数やメソッドを


class 家電クラス{
string name;
int price;
}

固有の部分は継承クラスから作る。

class テレビ extends 家電{
int 画面サイズ
string name;
}

共通部分をまとめてすっきり見せる。

テレビクラス

継承することで

コンソールの検索プログラム
進捗報告（11時から）
csvから

要件定義：
仕様のチェック20分
内容の整理と仕事の分担20分
細かいロジックをある程度詰める30分

仕事の分担整理の結果main処理はお願いして、mainだけだと時間が足りなさそうな部分を担当。
具体的にはお金の増減部分。投入金額入力とお釣りの出力、および紙幣硬貨の増減部分を担当。

早い段階でロジックを相談しながら固められたのがよかった。具体的には投入金額ごとに％と/を活用して
値を管理できた。

main側で詰まった例外処理1件解決。
具体的には
同じscannerクラスに対してnextintとnextlineを使用するとnextlineについて入力待ちにならずに次の処理に遷移してしまうことで起きた問題だった
→scannerクラスをnextlineとnextintの方でインスタンスを分けることで解決。

データの持ち方や






webアプリ開発ロールプレイ
何を作るか？の要件定義から作成。

スケジュールは3週間。初日はスケジュール作成と役割決め。
基本的には時間を指定してその時間が来たら成果発表というスタンス


10分で各自指示内容の読み込み

40分：MTG：スケジュールの確認（簡単なスケジュールのフォーマット作成まで）と大まかな役割分担
→事前に渡されていたフォーマットが優秀だったので、これをそのまま流用して開発管理に使用する。


1時間：何を作りたいか?の内容確定　詳細な役割確定して作業に入る
11月9日までを目標に画面設計書とDB設計書完成
11月12日までに詳細設計書完成予定

1時間：ファイル共有のためのgithubアカウントを各々作成。

githubの連携が少し苦戦。
プロジェクト管理を一から全てやらないといけないのでgithubのアカウントを一から作成して成果物提出しないとならない。

sourcetreeと連携して進めるも、もう一人のメンバーがどうやってもリモートにプッシュできていなかった。

→
権限の問題。
今回は自分のアカウントを伝えてログインさせていたがもう一人のメンバーのアカウントでログインさせないといけなかった。
→
これでもプッシュ出来なかったが、アカウント管理側でcontributorを追加することで権限が取得出来てプッシュ出来た。




DB設計書完成してレビュー待ちだったが、遷移図と設計書を固めてから修正する可能性もあるのでDB設計書画面遷移図画面設計書合わせて提出する予定に変更

画面遷移図と画面設計書の完成→DB設計書完成→レビュー

要件定義をきちんと記録せずに議論していたのでどこで同意が得られているか？どこで認識の齟齬があるのか？
を言語化できていなかった。

→要件定義書を作成して共有。改めて基本設計書を作り直して提出できた。

レビュー後
・エラー画面に遷移する処理は不要。フロント側でjavascriptでの表示でエラーにするべき。
→修正

・DB設計に問題有。
→答案内容は選択肢毎にDBに登録されている状態。
→設計者：答案内容ごとDBに登録するとフロント側でフィールドとして持たせるのが楽そうだからとのこと。

むしろ、回答をランダムで表示させる際に便利だと思ったので、そういう理由ならそのDB設計で採用してもいいと伝える。
→自分がその機能を実現するとのことで承諾。

画面設計書作成開始




画面設計書作成

3画面分の作成
1ページずつ担当して進める。1時間くらいで作ってみて気になった点を議論して要件定義の追加も含め検討

以下論点：
①ユーザ情報の表示場所（ヘッダに入れるかボディに入れるか）
②そもそもヘッダフッタは要るか
③追加機能でJavaスクリプト使って画像が移り変わる機能を入れたい→優先度低めで要件に追加

ある程度論点が固まったと思ったのでレイアウトと説明書きを書く方に分かれて作業進める

説明書き追加作業中に気になった点を共有　
以下論点：
①採点結果画面表示の際のリンクはどこに飛ばす用を準備するか？
②結果画面にタイマー結果を表示させるか？

③そもそもタイマー機能は不要では？→担当者：JavaScript使ってタイマー機能を追加してみたい
→であれば経過時間を得点に含むように要件定義を変える

④ユーザー名は結果表示画面には要らないのでは？→冗長なので入れない
⑤そうすると、ユーザー名自体DBに入れなくてもよいのでは？
→後でユーザーの回答履歴を実装する用に使うために入れる
→後でっていつ？→前回スコアと名前を入れるからには有効活用したいが、どう活用するのか？
→そもそもクイズアプリでスコアの記録を取って楽しいのか？
→ランダムで問題を出すようにして、DBに最高得点を登録するようにすればいいのでは？分岐も楽。
→採用

⑥追加機能で最高ランキングを出せるようにしたい

レビュー後出た論点

①タイマーは経過時間にするのか？制限時間にするのか？
②問題画面で問題のリセット機能を実現したい→追加機能へ


全体的に、最初の段階で論点を出し切ることの大事さを痛感。

これをしないと時間経過で要件を追加するのが難しくなっていく。

とはいえ、設計書を書き進めていかないと論点はなかなかすぐには出てこないと思ったのでそこのバランスが大事。

次回詳細設計書作成。週末までに完成させる予定。



詳細設計書作成

先に作業に取り掛かってもらって作業の全体像を掴んだ状態で打合せに入った。迷いがない状態で詳細設計書の作成に移れるように。
以下出た論点
①ユーザー情報のformクラスは用意するべき？
→JavaScriptで実現できればいいのでは
②そもそも開始ボタンを押したときの要求はpost?get?
③値の異常値チェックはpost要求飛ばした先でする？
④バリデーションチェックは完全にJavaScriptでやるのか？バックエンド
⑤情報の登録のタイミングはいつにするか？

⑥初めて登録する人と2回目ログインする人の処理は分岐させるか？
⑦ユーザー名にスペースが入っていた場合に同じとみなすか？



論点を踏まえた上でプロトタイプを作成して共有。迷いなく作業が進められるようにした。

各々実装が出来そうな機能を役割を分けて作業を進め、タスクにも入れておく。

初回アクセスは必ずウェルカムページに飛び、他のページにアクセスできない要件

基本要件に入れていたが、想定していたやり方だと実現できそうにないことが分かった。

spring securityで特定のページにのみアクセスできるようにしたかったが、ログイン機能をつけない仕様
だったため、ログイン機能なしで実装する方法が分からなかった。
ただsubmitボタンを押す処理だと遷移してくれない。

→
ひとまず原始的な方法で実装。具体的にはアクセス回数記録する変数を用意して各コントローラに配置する方法。
少々着手中の設計書に修正が必要になる。

製造工程

全体で作成しないといけない成果物をチェックして、作業の順番と役割分担を行う。

自分の担当分：
①DB設計後のレビュー
②formクラスやセッションクラス等beanの作成
③フロントエンド処理（1画面）
④バックエンド処理（2画面）
⑤個別機能（アクセス制御）


formクラスとセッションクラスの作成
問題をformクラスに入れるのかセッションクラスに入れるのか分からない。

→問題はデータ量が多いのでセッションに入れるよりformクラスに入れて画面遷移毎しか値を持たないようにする。

セッションクラス
→
セッションの内容を別画面に渡そうとしても上手く渡せない。

→指定していたオブジェクトの名前が違った。変数名と同じsessionbeanにしていた。
springbootでは別画面に渡すオブジェクトはcamelcase記法に自動で変換される。


isAccessed問題

アクセス制御を行う変数のデフォルトの値をfalseにしたいが、設定の仕方が分からない。

→setcompleteしてセッション情報を破棄、破棄すれば情報はリセットされるとのこと。

→リセットされても値は変わらない。初期値の設定がどうしても必要。

→コンストラクタの実装で解決。




DBデータの初期化を行うデータベースファイルを取り込んで実行
→
実行や値取り出しは問題ないが、DBにデータを登録できていない。

→
application.propertiesに初期化文を何個か入れて試してみたが、自分のDBに反映されない。

spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialize=true
とか。

→エンティティクラスを作っていなかった。JPAリポジトリの仕様でエンティティクラスを作ると初期化されるようだ。

→エンティティクラスを作ってもSQLファイルの実行ができない。エンティティクラスを読み込んでその内容でDBを更新している。
SQLファイルを読み込んで、DBにもその内容を反映させたい。

→一旦保留。コントローラの作成時にまた改めて考える。

フロントエンド：1画面を自分が、2画面を他メンバーで。

共通レイアウト作成

参考書の内容のhtmlで共通レイアウト作成して、既存ファイルに読み込ませる。
→上手く読み込まない。

→gradleに前回ダウンロー度したライブラリがなかった。

→ダウンロー度し直して治る。

共通レイアウト作成作業

固定フッターとヘッダを作成する

→見出しが表示されなくなった

→固定ヘッダの裏に隠れており正しく表示されなかった

→固定ヘッダのタグをsticky-topに変更。




別の人が作成したquiz.htmlをレイアウトに組み込む。
画面上部に項目ごとで表示させたいのに上手くいかない。

→一旦ことローラの作成へ。


コンフリクト発生
プルリクを送ると作業が被っていた箇所でコンフリクトが起きた。

→ひとまず解消するために該当記述箇所を修正→治らない

コンフリクトを起こしたファイルを削除→治らない

ファイルの名前を変更→プッシュ出来た。

→
ただ、内容をプルしようとしたらまたコンフリクト。次回もう一度原因を探る。


・プルはしっかり毎回

・声掛け


コントとーらの値受け取る

htmlのタイマー


htmlのタイマーの内容がコントローラ側で受け取れなくなった。

inputのtype属性の設定ミス。type=buttonとしたうえでaction = onclickにしていた

→type=submitとしてformの属性にaction属性を追加。

問題IDとユーザーが選択した内容を引き渡したい

ラジオボタンで渡す→valueで指定して、値をrequestparamで受け取る

name属性を指定すればvalueの値を取ってくることはできるが、選択肢は複数あるので、これを取ってくる方法が不明。

→
@requestparamで引数を指定しないことで、値をmap型として全て取ってこれる。

→これでquestiondataを問題IDとユーザーの回答は取得できた。

→IDから答えを出す際に、どこから答えを取ってくるか？
DB→処理が重い
→
今回は別クラスを準備。セッション情報にquestionidと答えセットを登録したうえで結果画面出力前にこれを使用して計算処理を行う。

実装できたので、DB登録処理へ。

サービスクラスとリポジトリクラスを使用して登録処理。初回と２回目でsql文が違うのでそこも注意して実装。

→
初回登録者のユーザー名は登録できたが、ハイスコアが０点になっている。
→値の設定ミス。採点結果ではなく前回のスコアを登録していたので、0だった（新規登録者なので）

updateが実行されずエラーになる。
→
query情報の記述ミス。
UPDATE文記述で最後のセミコロンの間に空白を入れなかったため、セミコロンを含めた形でパラメータを取得していた。

基本機能は完成。次回追加機能とデザイン修正して提出予定。

ｃアクセス制御機能
設計ではアクセス回数をセッション情報として持たせてこれをもとに画面ごとのアクセス制御を行うとしていた。

→そもそもアクセス回数を使用する必要がないと思った。

問題画面や結果画面はpost要求でしか飛ばないので、get要求の場合に特定の画面に飛ぶように設計しなおした。



デザイン修正
気になるところを修正。
result画面、クイズ画面、ウェルカム画面で生のhtmlの文字になっていたところを修正
→bootstrapで編集しようとしたが色や間隔でちょうどいい値がなかった。
→cssをメインに使用して修正をかけた。


成果物レビュー

大きな指摘はなかった。


成果物をgithubにプッシュ
→
認証が通らなくなっている。
→
トークンが切れていたことが原因

認証を通すことはできたが、プッシュしてもrejectされる。

→プルしてからプッシュしたら治った

試験工程
試験項目作成

タイマーを18分くらい経過した後に回答を提出するとエラーになる。

→エラー箇所を見るとセッション情報を読み出すタイミングでエラーになっている

→時間経過でセッション情報が消えることが原因か？

一旦検証に回して対策を考える。

→ブラウザでセッションタイムアウト時間があることが原因（２０分）
→試験時にセッションのnullチェック実施で対処。



長い文字を入れたらエラーになる。

SQLの文字数指定していたため。

→バックエンド側でDB文字数以上の文字数はカットする処理を実施。


ランキング機能が働かなくなった。自環境下

→gitでpullした内容を読み込んでいたため。
本番環境使用予定のapplication.propertiesでAWSに配置しているDBに接続していた。

自身のテスト用DBの方を見ていたせいで反映されていなかった。


試験項目作成

結合試験と単体試験の違いが分からなかった

指摘を受けた内容で修正。今回作る内容では単体試験と


Junit利用してテストコード作成

→

採点処理の内容をテストしようとしたが、テスト側でリクエストパラメータを受け取る方法が分からない。

モデルの内容を受け取る方法は分かったが、リクエストパラメータを取得する場合だとstring値を受け取るメソッドしかなかった。


今回のケースだと@requestparamでmap型を使用して受け取っていたので受け取れなかった。
@modelattributeを追加して、モデルで受け取れるようにしたが動かない。

リクエストを飛ばすのではなくサービスクラスをテストで使用する。

→セッションを使用しており、これを受け取る方法が分からなかった。

→
時間もなかったのでテストコードを書くのではなく、デバッグと結果画面の画像を貼り付けるにとどめた。




試験工程

→
11時にはほとんど終了

ソースコード修正と設計書手直しに入る。



外部ソースコードをgithubからeclipseに導入
→
ライブラリを読み取っていない。
gradleネイチャーを追加を実行しても変わらず。

→
バージョンを7.0から6.9に変更したが治らず。

→
gradleプロジェクトのリフレッシュを実施したら治った。



デザイン修正

クイズ回答画面の提出とキャンセルボタンのinputタグのボタンをbootstrapに変更した。
→
縦並びや横並びにしたいがbootstrapでは修正できない。
→
CSSクラスを追加してfloat:leftを導入してみたが変わらない
→
bootstrapでCSS導入して位置を修正してもいいが、これではbootstrapの意味がない。

スマートフォンで見ると、ボタン押下しようとしてもフッターが邪魔で押せない。

フッターをfixedbottomの状態にしたうえでボタンを配置しても上手く配置されないのが原因だと思われる。
bootstrap使用をやめてＣＳＳを自分で定義するように変更した。

Linux演習

ホームディレクトリとルートディレクトリの違いが分かっていなかった。


ホームディレクトリ
ログインした直後に移動するディレクトリ（フォルダ）のこと

ルートディレクトリ
階層の一番上のディレクトリ

gitでホームディレクトリに飛ぶショートカットが分からない

rmコマンドでディレクトリを削除しようとしてもできない

階層の一個上から出ないと実行できないため

rmで実行→できない→rmdirでディレクトリごと削除する→file not empty

echoで変数の内容を実行しようとしたが実行できなかった

$を変数の中に入れていなかった。

正規表現で取得した内容を出力することができるが、これを変数に入れる方法が分からない。
外部テキストファイルを検索して内容を出力するのはgrepコマンド（と正規表現）
戻り値を変数に入れるには、
$()にgrep実行内容を入れてこれを変数に渡す。これをechoコマンド実行して他ファイルに入れれば繁栄できる。


テキストファイルの中身をbashで全部削除する方法が分からない。
→
sed 正規表現　テキストファイル
の形式で行ってみたが削除した結果を表示するだけで本体が書き換わっていない。

オプションを書いていなかった。
-i -eオプションで消せる。


正規表現で最後の文字を指定する方法が分からない

正規表現を使用。 *.exe等で指定

更新日時で検索する方法


アーカイブファイルを作成する
linuxでアーカイブファイルを作成

.tarファイルを解凍しようとしたがgzipコマンドによる解凍方法しか調べても出なかった。
gzip圧縮ファイルの展開方法は載っていたのでこちらで作成
→gzip圧縮ファイルを作ろうとしたらCannot update compressed archivesで作成できず

よく調べたらtarファイルで解凍する方法も載っていたので、こちらの方法を実行する
圧縮ファイルを展開するコマンドを打ち間違えていたことが原因。

ファイルをmvコマンドで別で作ったディレクトリに移動しようとしたが移動してくれない。

→
ディレクトリ先頭に/をつけていたため、ルートディレクトリに入ってしまった
→
lsで実行した結果の末尾に/をつけたがディレクトリとして認識しない。

→/を消したら移動できた。

大小関係比較
x< 12
といった不等号で比較を行う
→
動かない。大小比較などは　-gt　-geコマンドで実行する。


無限ループ発生させる条件でエラーが出て正しく実行されない

while[ $num -eq x]としても条件式を正しく認識せずにフォールスルーしてしまう。
;を追加してみたが駄目。

条件式のミス。「＝だったらループを繰り返す」ではなく「＝でないならばループを繰り返す」だった。

linuxで動いていた正規表現をpowershellのシェルスクリプトで同じように記述しても動かない。

*[aiu]*でaiuのいずれかを含む文字列を検索する、といった処理ができない。

get-childitem C:\Users\gips\*[aiu]* -recurse

get-childitem C:\Users\gips '*[aiu]*' -recurse


ファイルを調べる　正規表現は〇〇を使用する　の形式ではなく
パス本体にワイルドカードを使用することで検索出来た。

元のテキストファイルの中身を書き換えた内容を出力したい

→
置換を実施しようとしたが、linuxコマンドで行う置換をチェインにして連続で実行する方法が分からない

→
パイプラインをつなげて実行することで置き換えを行うことができた。
→
置換済みの内容をプロンプト上で表示させることはできたがこれを別ファイルに書くことができない
write-outputで実行してもパイプライン上で実行してくれない。
→
out-fileで新規のテキストファイルを内容を出力できた。


linux仮想環境構築チャレンジ

https://qiita.com/whim0321/items/ed76b490daaec152dc69

手順通りにやったがubuntuが起動できない

→
カーネルのインすとーらを起動していなかった。インストールしたら問題なく動いた。

MySqlサーバをインストールしてみる
→
yum install mysql-serverでインストールしてみたがyumコマンドが見つからない。
→
sudo apt install yumでインストールしようとしても
調べてみたらそもそもsudo apt installでダウンロードできるみたいなのでこっちでインストール。
途中でmysqlパッケージのダウンロードが中断してしまう。
sudo apt get-updateでアップデートしていなかったことが原因。updateしてから同命令を実行したらインストールできた。

ダウンロードできたがログインできない。

初期のセキュリティ設定を行おうとするとエラー
Securing the MySQL server deployment.

Enter password for user root:
Error: Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)

もう設定されているのかと思って
mysql -u root -pでログインしてみたらログインパスワードを要求される。
→
ログインパスワードを設定していないので、やはりそこの設定を行う必要がある

もう一度初期の設定のコマンドを行ってみたら設定画面に行けた。



























