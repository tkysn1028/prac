mVC

モデル
裏方処理
内部で動く処理

view
見た目
UIの入出力を担当する。

controller
viewとmodelの制御を担当する。
入力した内部処理の結果次の画面をどこにするのか？
司令官？
土の処理の時にどの画面に遷移するのか？

springbootは青い→を用意してくれているので、mVCを実装する。

springboot基礎
webアプリはフレームワークを導入して進める。
一から作ることはあまりない。
アプリが実現したい固有処理に集中する。
Java言語を利用したフレームワーク。
フレームワークは変わる。
プロジェクトの作成ハードルが低い。環境に応じて設定ファイル
起動すらしない。
webさあーばが最初から用意されているためすぐに始められる。

Javaのコードは思ったほど書かない。


あの手＾－しょん
クラスやメソッドフィールドをwebアプリケーションと結びつける。
アノテーションの名前と意味が大切。

アノテーションはもともと意味がなかったが、アノテーションに意味を持たせる。
アノテーションと機能を結び付けようぜ
@controllerでコントローラの役w理を持たせる。

リクエストされたアドレスとメソッドを結びつける。
/はhttp://localhost:8080

@controller
アノテーションを変えた
restcontrollerではない。controllerのアノテーションは基本。
returnされたものをhtmlで返すのがrest

frameworkは名前で連携しているため、名前が違うと上手く動かない。

modelクラス
webページで使用するデータの管理する
コントろーーらのデータをニューに渡すためにモデルにデータを渡す

modelクラスに属性データを渡す
addattribute
第一曳ううで値を受け取る。

data-th-text
タイムリー府構文
ライブラリに近い
ｈｔｍｌtextを明かしている。htmlに埋め込むことでjava
のコードで書き換える。

thymeleaf
htmlをベースとしたテンプレ
タグをそのままにしてタグ内で書き換える技術。
タイムリー府の構文を埋め込んでブラウザで埋め込む。
開発者にとって便利

ビューからコントローラの連携
ビューに入力欄を作り入力データをコントローラに複雑























