ネットワーク
ローカルではなくインターネット
ネットワーク
ごく普通にネットにつながった携帯やパソコン
ネットとは何か
何と何がつながっているか
ブラウザと
ネットワークの仕組みについて
ネットワーク

・ネットワーク
・インターネット
・LAN
・WAN
・ネットワーク管理者

ネットワーク管理者

インターネット
ネットワークは複数の機器を接続して相互に通信する
会社で社内ネットワークを構築して行う
自宅でサイトを見る
ネットワークは世の中にたくさん
それぞれは別のネットワーク
会社から別のネットワークを津j投げることはできない
ネットワークの集合体
世界中のネットワークを接続した巨大なネットワーク
インターネットはプロバイダと呼ばれる事業は時きゃいえやくする。

契約してネットワークを利用できるよ
WAN・・・遠隔地のネットワークを連携　地域や国を結ぶ
LAN・・・ローカル　会社企業など　独立しているので勝手には繋げない

WAN　インターネットLAN

インターネットにつながらないみたいな環境

一般の電話回線や専用線など
インターネットなどでLANをつなげる

自宅のネットワークでネットに繋がらない、みたいなネットワークの面倒を見る人


ネットワークには面倒を見る人が必要
一般的にPCのっ機器運用管理保守
ネットワークの効率保持
基本的にだれかが何かをする

インターネットの管理者はいない
典型的な自律分散システム　LANの管理者　自分のネットを運用してルールを守ることで何とかなっている
ご自宅でやって
見ず知らずのネットワーク同士が相互にやり取りするよ

ネットワーク　複数の機器を接続して相互に通信
それぞれのネットワークは別のネットワーク

ネットワーク初歩
ノード
伝送媒体
ルータ
パケット

NAS
ノードとdノードの間を結ぶものを伝送媒体
インターネットと家庭用LANをつなぐ。
WAN側
LAN側
の2つ。PCとLANの中でつなげる。
業者が繋いだWANに綱江ゲル。パケット通信

ネットワークを流れるのは128バイト
8ビットで1バイト
パケットはデー多を
何でこんな分けるの？
デー多を占有されてしまうのでされないように。
複数のノードの複数データ通信。
実務は使わない。

複数のノードが複数のデータ通信。

OSI参照モデル
ネットワーク構成の基礎概念
みんなが誰もが通信できる仕組み

プログラムそのものではない。

データ通信はメーカ独自の通信で実現していた。メーカーの異なる機器では接続できない。
不便んあのでISOメーカーに依存しないデータ通信を作った
メーカーの枠を超えて通信する

通信機器が持つべき機能を階層構造で分割
ネットワークエンジニアとしては基本知識

ビット列を電気信号に変える　物理層
アプリケーション層
ブラウザでwebページを作成　データを受け取るなど

ノード間で通信すると順番に処理する
各層を順に通ってデータが流れる。宛先カプセルか
各層事にヘッダをつけていくカプセルか。

つけて次の層で渡す。送信側の2層と受け取り側の2層で
受信側では使い終わったら捨てる　非カプセル化

階層構造にする利点は他の層を意識する必要がなくなる。自分の層の未意識すれば何とかなる。
通信が有線か無線か、有線か無線家は

全部まとめるのは大変

OSI参照モデル
カプセル化

TCPIP
プロトコルスタック

NIC
カードで実施。別売りだった
無線LANでつなぐのが当然なのでマイナー

イーサネットの規格で5より下は売っていない。
カテゴリはケーブルに印字されている。

MACアドレス
すべてのパケットをノード全部に届ける。
繰り返しで実現
複数の端末で同時に送る
破棄しないでチェックすると通信のセキュリティがやばい。
自分宛かどうかはMACアドレスでチェックする。
NICにアドレスが降られていて、被ることはない。

MACアドレスを付与してレイヤに投げる


ネットワークインタフェース層
MACアドレスはどこで識別
無線でもMACは使う

実務で出会ったベースで覚える
IPでノード間の経路制御。IPより上はMACを気にしない。
通信相手までの経路制御
海外まで探さないように

ネットワーク上ノードの識別

デフォルトゲートウェイ
設定しないと自分がいるネットワークの外にできない


DHCP
自動でLANのIPアドレスを割り当てする。



①idについて
空文字だったら
メッセージを出して
テキストボックスの背景色を変える

②
テキストボックスname
空文字だったらメッセージを出して
テキストボックスの背景色を変える

③
他のテキストボックスについて繰り返す

④2つのパスワードが異なっていれば
メッセージを出して
テキストボックスの背景色を変える

⑤
パスワードの文字数が10未満であれば
メッセージを出して
背景色を変える

⑥
loginを表示する

繰り返し部分
これがメソッドになる。


booleanの変数名にflagを使わない。

素数だったらflagが入るのか、

isprimenumだった方が分かりやすい。

flagで0や1を使うべきではない。booleanの方が2値を取ることが保証される
のでやりやすい。

数値だけだと管理しにくい
税率は定数

定数で

アルゴリズムを知っていればかけるけど、そうではないことがある。


java
曜日判定

インタフェース

デザインパターン
メリット
既にパターンでまとめられた内容
全パターンを乗っけると楽。

今あるソースコー度を使いまわす、意思疎通が容易になる。

隠蔽するのが主ではない。
ファクトリは隠蔽が趣旨ではない。

柔軟に選べるようにファクトリするのが本来の趣旨。

strategyパターン
戦術を立てるための大きな流れ
みんな同じ作り方を同じにしてくださいねー

あくまでもメソッドは3つ作っておくからそこを使ってなんか作ってね



①
今回出題する曜日を決める

②
画面から入力させる

③
①と②が合っているか判断する

合っていれば正解
合っていなければ不正解

④
終了するか尋ねる
終了する→プログラム終了
終了しない→①に戻る

数増やすと面倒臭いのでmerge


ありがちなアンチパターン
ローカル変数は使用する直前で使用しましょう

コレクション：：
複数のデータを管理

arraylistはメソッド


hashmap
キーと値のペアを使うよ


①
pointback
コメントがない

②
30と３１があるよ

③
flagは何さしているのか分かりにくい。





データから全レコードを取得するやり方
→（リスト）
リストをfor文で一レコードずつチェック
リストに両方合うレコードがなければログインNG

全レコードを取得する
→テーブルから条件に合致するレコードを取得する
where句で検索をSQLで行わせた方がよい。

パスワードで検索することは問題
パスワードがそのまま入ることはない。パスワードはハッシュ化されている。

ランダムに見えるハッシュ値
ハッシュ値は元の文字列を取り出すことはできない。
IDでデータ取ってきて、パスワードを

一から書いてこない。ログイン機能で用意されている内容を引っ張ってkるのが基本。


メソッドをID,name,passで分けるのではなく
桁数チェック
空欄チェック
正規表現チェックなど。

クイズアプリ
何問か作って答えた画面を

男塾

























































